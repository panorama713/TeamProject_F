import { BootpayManager } from "../support/bootpay-manager";
import { SessionStorageManager } from "../support/storage";
import { ConfirmModel, EnvironmentModel, ErrorModel, ExtraModel, ItemModel, RequestAuthenticationModel, RequestPaymentModel, RequestSubscriptionModel } from "../models/bootpay-interface";
import { EventLoggerManager } from "../support/logger";
export declare class BootpayRequestPaymentManager extends BootpayManager {
    $session: SessionStorageManager;
    $logger: any;
    $event: EventLoggerManager;
    platformType: number;
    $transactionKey: string;
    extra: ExtraModel | undefined;
    browserBootpayFilter: any;
    static invalidRequestParams: any;
    constructor();
    /**
     * 결제 요청 진행하기
     * Comment by GOSOMI
     * @date: 2021-05-11
     * @param data: RequestPaymentModel
     * @returns Promise<any>
     */
    requestPayment(data: RequestPaymentModel): Promise<any>;
    /**
     * 결제 승인
     * Comment by GOSOMI
     * @date: 2021-05-20
     */
    confirm(): Promise<any>;
    /**
     * 이벤트 완료 이벤트
     * Comment by GOSOMI
     * @date: 2021-07-12
     */
    eventDone(response: any, displaySuccessResult?: boolean): void;
    /**
     * 오류를 처리한다
     * Comment by GOSOMI
     * @date: 2022-01-12
     */
    eventError(e: any): void;
    /**
     * 트랜젝션 키를 만든다
     * Comment by GOSOMI
     * @date: 2021-05-12
     * @returns string
     */
    generateTransactionKey(): string;
    requestSubscription(data: RequestSubscriptionModel): Promise<ConfirmModel>;
    /**
     * 본인인증 요청
     * Comment by GOSOMI
     * @date: 2021-12-06
     * @param data: RequestAuthenticationModel
     */
    requestAuthentication(data: RequestAuthenticationModel): Promise<ConfirmModel>;
    getUserDeviceEnvironment(): EnvironmentModel;
    /**
     * display result
     * Comment by GOSOMI
     * @date: 2022-01-12
     */
    isDisplaySuccessResult(): boolean;
    isDisplayErrorResult(): boolean;
    /**
     * Result View를 호출한다
     * Comment by GOSOMI
     * @date: 2022-01-12
     */
    displayResultView(receiptId: string): void;
    /**
     * Result Error View를 보여준다
     * Comment by GOSOMI
     * @date: 2022-01-12
     */
    displayResultErrorView(e: ErrorModel): void;
    /**
     * OpenTypeUserAgent Filter
     * Comment by GOSOMI
     * @date: 2022-05-09
     */
    openTypeFilter(extra: ExtraModel): ExtraModel;
    /**
     * 요청 데이터 필수 값 체크
     * Comment by GOSOMI
     * @date: 2021-05-12
     * @param data: RequestPaymentModel
     */
    static invalidRequestParamsData(data: RequestPaymentModel | any): void;
    /**
     * 첨부된 item data invalidate
     * Comment by GOSOMI
     * @date: 2021-05-12
     * @param items: Array<ItemModel>
     * @param price: number
     */
    static invalidRequestItemsData(items: Array<ItemModel> | undefined, price: number): void;
}
export declare const BootpayRequestPayment: BootpayRequestPaymentManager;
