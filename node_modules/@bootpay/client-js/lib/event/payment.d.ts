/// <reference types="node" />
import { BootpayWindowEvent } from "../../support/event";
import { BootpayPollingEvent } from "./polling";
interface PollingDataModel {
    applicationId: string;
    receiptId: string;
    gatewayUrl: string;
    transactionKey: string;
}
declare class BootpayPaymentEventManager extends BootpayWindowEvent {
    $eventPrefix: string;
    $messageEventName: string;
    $pollingInterval: NodeJS.Timeout | undefined;
    $pollingEvent: BootpayPollingEvent;
    $pollingData: PollingDataModel | undefined;
    pollingInterval: number;
    isDone: boolean;
    constructor();
    /**
     * 결제 이벤트를 바인딩한다
     * Comment by GOSOMI
     * @date: 2021-05-11
     * @param resolve: Function
     * @param reject: Function
     */
    bind(resolve: Function, reject: Function): void;
    /**
     * 결제 이벤트에 필요한 기본 값들을 받는다
     * Comment by GOSOMI
     * @date: 2021-12-29
     */
    setDefaultPaymentData(applicationId: string, transactionKey: string): void;
    /**
     * bootpay dom custom 이벤트 호출
     * Comment by GOSOMI
     * @date: 2021-12-24
     * @param eventName: string
     * @param data: any
     */
    callBootpayDOMEvent(eventName: string, data?: any): void;
    /**
     * Polling Event를 시작한다
     * Comment by GOSOMI
     * @date: 2021-12-29
     * @param
     */
    startPollingEvent(): void;
    /**
     * Polling Event를 초기화한다
     * Comment by GOSOMI
     * @date: 2021-12-29
     */
    clearPollingEvent(): void;
}
export declare const BootpayPaymentEvent: BootpayPaymentEventManager;
export {};
