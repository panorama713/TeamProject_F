import { Resource } from "./resource";
import { SessionStorageManager } from "./storage";
export declare const LOG_LEVEL: {
    debug: number;
    info: number;
    warning: number;
    error: number;
};
interface EventDataModel {
    application_id?: string;
    step: string;
    tk?: string;
    status?: number;
    msg?: string;
    trace?: string;
    request?: any;
    response?: any;
    version?: string;
}
export declare const Logger: {
    level: number;
    /**
     * 로그 레벨을 설정한다
     * Comment by John
     * @date: 2021-02-18
     * @param logLevel: number
     */
    setLogLevel(logLevel: number): void;
    messageStringify(key: string, message: any): string | undefined;
    debug(key: string, message: any): void;
    info(key: string, message: any): void;
    warn(key: string, message: any): void;
    error(key: string, message: any): void;
};
export declare class EventLoggerManager extends Resource {
    $session: SessionStorageManager;
    $tk?: string;
    $applicationId?: string;
    $platformType?: number;
    $receiptId?: string;
    constructor();
    /**
     * Token키를 설정
     * Comment by GOSOMI
     * @date: 2021-05-20
     * @param tokenKey: string
     * @returns void
     */
    setTokenKey(tokenKey: string): void;
    setReceiptId(receiptId: string): void;
    clearInstance(): void;
    send(eventData: EventDataModel): Promise<any> | void;
    sendError(eventData: EventDataModel): void;
    setApplicationId(key: string | undefined): void;
    /**
     * 결제창 닫기 이벤트를 전송한다
     * Comment by GOSOMI
     * @date: 2022-05-13
     */
    sendCloseEvent(): Promise<any>;
}
export declare const EventLogger: EventLoggerManager;
export {};
