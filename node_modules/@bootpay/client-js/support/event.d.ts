import { BootpayManager } from "./bootpay-manager";
interface EventMessage {
    event: string;
    error_code: string;
    message?: string;
    payload?: any;
}
export declare class BootpayEventError extends Error {
    eventMessage?: EventMessage;
    constructor(message: EventMessage);
}
declare global {
    interface Window {
        addBootpayEventListener(event: string, cb: Function, opts?: any): Window;
        removeBootpayEventListener(event: string): Window;
        resetBootpayEventListener(event: string, cb: Function, opts?: any): void;
    }
    interface Document {
        addBootpayEventListener(event: string, cb: Function, opts?: any): Document;
        removeBootpayEventListener(event: string): Document;
        resetBootpayEventListener(event: string, cb: Function, opts?: any): void;
    }
    interface Element {
        addBootpayEventListener(event: string, cb: Function, opts?: any): Element;
        removeBootpayEventListener(event: string): Element;
        resetBootpayEventListener(event: string, cb: Function, opts?: any): void;
    }
}
export interface BootpayEventListener {
    __BOOTPAY_NAMESPACE: any;
    initialize(): void;
    isBind: boolean;
    on(event: string, cb: any, opts?: any): any;
    off(event: string): any;
}
export declare const EventListener: BootpayEventListener;
export declare class BootpayWindowEvent extends BootpayManager {
    $resolve: Function | null;
    $reject: Function | null;
    constructor();
    reject(data: any): void;
    resolve(data: any): void;
    /**
     * 함수를 class instnace variables에 넣는다
     * Comment by GOSOMI
     * @date: 2021-05-11
     * @param resolve: Function
     * @param reject: Function
     */
    setCallbackFunction(resolve: Function, reject: Function): void;
    /**
     * event 데이터를 파싱한다
     * Comment by Gosomi
     * @date: 2021-02-19
     * @param data: string
     */
    parseEvent(data: string): any;
}
export declare const EventMessage: (e: unknown) => unknown;
export {};
